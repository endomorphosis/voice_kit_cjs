(()=>{"use strict";var e={m:{},u:e=>e+".js",o:(e,o)=>Object.prototype.hasOwnProperty.call(e,o),p:"/"};e.b=document.baseURI||self.location.href,globalThis.__TRANSFORMER_WORKER_WASM_PATH__="/wasm/",document.getElementById("output");const o=document.getElementById("chat-input"),t=document.getElementById("send-button"),r=document.getElementById("chat-messages"),n=document.getElementById("mic-button"),s=document.getElementById("log-messages");let a=!1,i=0;async function c(){try{return await chrome.runtime.sendMessage({type:"check_status"}),a=!0,i=0,!0}catch(e){return console.warn("Connection error:",e),a=!1,i<3?(i++,console.log(`Retrying connection... Attempt ${i}`),await new Promise((e=>setTimeout(e,1e3*i))),c()):(l({status:"error",data:"Could not connect to extension. Please try reloading."}),!1)}}function l(e){const o=document.getElementById("status"),t=document.getElementById("status-indicator"),r=document.getElementById("loading-progress");o&&t&&(t.className=e.status,"loading"===e.status?(o.textContent="Loading model...",e.progress&&(r.textContent=`${e.progress.toFixed(1)}%`)):"error"===e.status?(o.textContent=`Error: ${e.data}`,t.className="error",r.textContent=""):"ready"===e.status&&(o.textContent="Model ready",t.className="ready",r.textContent=""))}chrome.runtime.onMessage.addListener(((e,o,t)=>{console.log("Popup received message:",e),a=!0,l(e)})),document.addEventListener("DOMContentLoaded",(async()=>{console.log("Popup opened"),await c()&&console.log("Connected to extension"),setInterval(c,5e3);try{await Promise.all([y(),w()]),console.log("Initialization complete")}catch(e){console.error("Initialization failed:",e),m("error","Failed to initialize: "+e.message)}}));const d={log:console.log,error:console.error,info:console.info};function m(e,...o){const t=document.createElement("div");return t.className=`log-entry ${e}`,t.textContent=o.map((e=>"object"==typeof e?JSON.stringify(e):e)).join(" "),s?.appendChild(t),s?.scrollTo(0,s.scrollHeight),d[e](...o)}async function g(){const e=o.value.trim();if(!e)return;if(!a&&!await c()){const e=document.createElement("div");return e.className="message assistant error-message",e.textContent="Not connected to extension. Please reload the popup.",void r.appendChild(e)}const t=document.createElement("div");t.className="message user",t.textContent=e,r.appendChild(t),o.value="";const n=document.createElement("div");n.className="message assistant",n.innerHTML='<span class="loading-spinner"></span> Generating response...',r.appendChild(n),r.scrollTo(0,r.scrollHeight);try{const o=await new Promise(((o,t)=>{chrome.runtime.sendMessage({action:"generate",text:e},(e=>{chrome.runtime.lastError?t(new Error(chrome.runtime.lastError.message)):o(e)}))}));if(n.remove(),o?.error){const e=document.createElement("div");e.className="message assistant error-message "+(o.error.includes("memory")?"recoverable":"");let t=o.error;if((o.error.includes("1879778072")||o.error.includes("memory"))&&(t="The message was too long to process. Try sending a shorter message or breaking it into smaller parts."),e.textContent=t,r.appendChild(e),o.error.includes("memory")){const e=document.createElement("div");e.className="memory-warning",e.textContent="Tip: Keep messages under 2000 characters for best performance.",r.appendChild(e)}}else{const e=document.createElement("div");e.className="message assistant",e.textContent=o,r.appendChild(e)}}catch(e){n.remove();const o=document.createElement("div");o.className="message assistant error-message",o.textContent="Error: "+(e.message||"Could not connect to extension. Please try reloading."),r.appendChild(o),console.error("Error sending message:",e),c()}r.scrollTo(0,r.scrollHeight)}console.log=(...e)=>m("info",...e),console.error=(...e)=>m("error",...e),console.info=(...e)=>m("info",...e),t.addEventListener("click",g),o.addEventListener("keypress",(e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),g())}));let u=null,p=[],h=null;async function y(){try{return console.log("Initializing ASR worker..."),h=new Worker(new URL(e.p+e.u(706),e.b),{type:void 0}),h.onerror=e=>{console.error("ASR worker error:",e),m("error","ASR worker error:",e.message)},new Promise(((e,t)=>{const r=setTimeout((()=>{t(new Error("ASR worker initialization timed out"))}),3e4);h.onmessage=t=>{const{type:s,text:a,error:i}=t.data;"ready"===s?(console.log("ASR worker ready"),clearTimeout(r),n.disabled=!1,e()):"transcription"===s?o.value=(o.value+" "+a).trim():"error"===s&&(console.error("ASR error:",i),m("error","ASR error:",i))}}))}catch(e){throw console.error("Error initializing ASR:",e),m("error","Failed to initialize speech recognition"),n.disabled=!0,e}}async function w(){try{const e=await fetch("https://avatars.githubusercontent.com/u/123265934"),o=await e.blob(),t=URL.createObjectURL(o);document.querySelectorAll('link[rel*="icon"]').forEach((e=>{e.href=t}))}catch(e){console.error("Failed to cache icon:",e)}}n.disabled=!0,document.addEventListener("DOMContentLoaded",(()=>{y()})),n.addEventListener("click",(()=>{u&&"inactive"!==u.state?u&&"recording"===u.state&&u.stop():async function(){try{if(!await async function(){try{const e=await navigator.permissions.query({name:"microphone"});if("granted"===e.state)return!0;if("prompt"===e.state)return m("info","Please allow microphone access in the browser prompt"),(await navigator.mediaDevices.getUserMedia({audio:!0})).getTracks().forEach((e=>e.stop())),!0;if("denied"===e.state){m("error","Microphone access is blocked. Please allow access in your browser settings.");const e=document.createElement("div");return e.className="log-entry info",e.innerHTML='\n                To enable microphone access:\n                <ol>\n                    <li>Click the camera/microphone icon in your browser\'s address bar</li>\n                    <li>Select "Allow" for microphone access</li>\n                    <li>Refresh this page</li>\n                </ol>\n            ',s.appendChild(e),!1}}catch(e){return console.error("Error checking permissions:",e),!1}}())return void n.classList.remove("recording");console.log("Requesting microphone access...");const e={audio:{channelCount:1,sampleRate:16e3}},o=await navigator.mediaDevices.getUserMedia(e);console.log("Microphone access granted:",o.getAudioTracks()[0].getSettings()),u=new MediaRecorder(o,{mimeType:"audio/webm;codecs=opus"}),console.log("MediaRecorder created with settings:",u.mimeType),u.ondataavailable=e=>{e.data.size>0&&(p.push(e.data),console.log("Recorded chunk size:",e.data.size))},u.onerror=e=>{console.error("MediaRecorder error:",e.error)},u.onstop=async()=>{try{console.log("Recording stopped, processing audio...");const e=new Blob(p,{type:"audio/webm"});console.log("Audio blob created, size:",e.size),p=[];const t=new AudioContext({sampleRate:16e3}),r=await e.arrayBuffer();console.log("Audio data size:",r.byteLength);const s=await t.decodeAudioData(r);console.log("Audio decoded, duration:",s.duration);const a=s.getChannelData(0);console.log("Audio converted to Float32Array, length:",a.length),h?(h.postMessage({buffer:a}),console.log("Audio sent to ASR worker")):console.error("ASR worker not initialized"),o.getTracks().forEach((e=>{e.stop(),console.log("Audio track stopped:",e.label)})),n.classList.remove("recording")}catch(e){console.error("Error processing recorded audio:",e),"InvalidStateError"===e.name&&console.error("Audio context error - possible sample rate or format issue"),m("error","Error processing audio:",e.message)}},u.start(1e3),console.log("Recording started"),n.classList.add("recording")}catch(e){console.error("Error starting recording:",{name:e.name,message:e.message,constraint:e.constraint,stack:e.stack});let o="Could not start recording: ";if("NotAllowedError"===e.name)return;"NotFoundError"===e.name?o+="No microphone was found":"NotReadableError"===e.name?o+="Microphone is already in use by another application":o+=e.message||"Unknown error",m("error",o),n.classList.remove("recording")}}()}))})();
//# sourceMappingURL=popup.js.map